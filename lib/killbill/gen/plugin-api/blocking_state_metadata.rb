#############################################################################################
#                                                                                           #
#                   Copyright 2010-2013 Ning, Inc.                                          #
#                   Copyright 2014 Groupon, Inc.                                            #
#                   Copyright 2014 The Billing Project, LLC                                 #
#                                                                                           #
#      The Billing Project licenses this file to you under the Apache License, version 2.0  #
#      (the "License"); you may not use this file except in compliance with the             #
#      License.  You may obtain a copy of the License at:                                   #
#                                                                                           #
#          http://www.apache.org/licenses/LICENSE-2.0                                       #
#                                                                                           #
#      Unless required by applicable law or agreed to in writing, software                  #
#      distributed under the License is distributed on an "AS IS" BASIS, WITHOUT            #
#      WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the            #
#      License for the specific language governing permissions and limitations              #
#      under the License.                                                                   #
#                                                                                           #
#############################################################################################


#
#                       DO NOT EDIT!!!
#    File automatically generated by killbill-java-parser (git@github.com:killbill/killbill-java-parser.git)
#


module Killbill
  module Plugin
    module Model

      class BlockingStateMetadata


        attr_accessor :blockable_id, :service, :state_name, :blocking_type, :effective_date, :transitioned_to_blocked_billing, :transitioned_to_unblocked_billing, :transitioned_to_blocked_entitlement, :transitioned_to_unblocked_entitlement

        def initialize()
        end

        def to_java()
          # conversion for blockable_id [type = java.util.UUID]
          @blockable_id = java.util.UUID.fromString(@blockable_id.to_s) unless @blockable_id.nil?

          # conversion for service [type = java.lang.String]
          @service = @service.to_s unless @service.nil?

          # conversion for state_name [type = java.lang.String]
          @state_name = @state_name.to_s unless @state_name.nil?

          # conversion for blocking_type [type = org.killbill.billing.entitlement.api.BlockingStateType]
          @blocking_type = Java::org.killbill.billing.entitlement.api.BlockingStateType.value_of( @blocking_type.to_s ) unless @blocking_type.nil?

          # conversion for effective_date [type = org.joda.time.DateTime]
          if !@effective_date.nil?
            @effective_date =  (@effective_date.kind_of? Time) ? DateTime.parse(@effective_date.to_s) : @effective_date
            @effective_date = Java::org.joda.time.DateTime.new(@effective_date.to_s, Java::org.joda.time.DateTimeZone::UTC)
          end

          # conversion for transitioned_to_blocked_billing [type = java.lang.Boolean]
          @transitioned_to_blocked_billing = @transitioned_to_blocked_billing.nil? ? java.lang.Boolean.new(false) : java.lang.Boolean.new(@transitioned_to_blocked_billing)

          # conversion for transitioned_to_unblocked_billing [type = java.lang.Boolean]
          @transitioned_to_unblocked_billing = @transitioned_to_unblocked_billing.nil? ? java.lang.Boolean.new(false) : java.lang.Boolean.new(@transitioned_to_unblocked_billing)

          # conversion for transitioned_to_blocked_entitlement [type = java.lang.Boolean]
          @transitioned_to_blocked_entitlement = @transitioned_to_blocked_entitlement.nil? ? java.lang.Boolean.new(false) : java.lang.Boolean.new(@transitioned_to_blocked_entitlement)

          # conversion for transitioned_to_unblocked_entitlement [type = java.lang.Boolean]
          @transitioned_to_unblocked_entitlement = @transitioned_to_unblocked_entitlement.nil? ? java.lang.Boolean.new(false) : java.lang.Boolean.new(@transitioned_to_unblocked_entitlement)
          Java::org.killbill.billing.notification.plugin.api.BlockingStateMetadata.new(@blockable_id, @service, @state_name, @blocking_type, @effective_date, @transitioned_to_blocked_billing, @transitioned_to_unblocked_billing, @transitioned_to_blocked_entitlement, @transitioned_to_unblocked_entitlement)
        end

        def to_ruby(j_obj)
          # conversion for blockable_id [type = java.util.UUID]
          @blockable_id = j_obj.blockable_id
          @blockable_id = @blockable_id.nil? ? nil : @blockable_id.to_s

          # conversion for service [type = java.lang.String]
          @service = j_obj.service

          # conversion for state_name [type = java.lang.String]
          @state_name = j_obj.state_name

          # conversion for blocking_type [type = org.killbill.billing.entitlement.api.BlockingStateType]
          @blocking_type = j_obj.blocking_type
          @blocking_type = @blocking_type.to_s.to_sym unless @blocking_type.nil?

          # conversion for effective_date [type = org.joda.time.DateTime]
          @effective_date = j_obj.effective_date
          if !@effective_date.nil?
            fmt = Java::org.joda.time.format.ISODateTimeFormat.date_time_no_millis # See https://github.com/killbill/killbill-java-parser/issues/3
            str = fmt.print(@effective_date)
            @effective_date = DateTime.iso8601(str)
          end

          # conversion for transitioned_to_blocked_billing [type = java.lang.Boolean]
          @transitioned_to_blocked_billing = j_obj.transitioned_to_blocked_billing
          if @transitioned_to_blocked_billing.nil?
            @transitioned_to_blocked_billing = false
          else
            tmp_bool = (@transitioned_to_blocked_billing.java_kind_of? java.lang.Boolean) ? @transitioned_to_blocked_billing.boolean_value : @transitioned_to_blocked_billing
            @transitioned_to_blocked_billing = tmp_bool ? true : false
          end

          # conversion for transitioned_to_unblocked_billing [type = java.lang.Boolean]
          @transitioned_to_unblocked_billing = j_obj.transitioned_to_unblocked_billing
          if @transitioned_to_unblocked_billing.nil?
            @transitioned_to_unblocked_billing = false
          else
            tmp_bool = (@transitioned_to_unblocked_billing.java_kind_of? java.lang.Boolean) ? @transitioned_to_unblocked_billing.boolean_value : @transitioned_to_unblocked_billing
            @transitioned_to_unblocked_billing = tmp_bool ? true : false
          end

          # conversion for transitioned_to_blocked_entitlement [type = java.lang.Boolean]
          @transitioned_to_blocked_entitlement = j_obj.transitioned_to_blocked_entitlement
          if @transitioned_to_blocked_entitlement.nil?
            @transitioned_to_blocked_entitlement = false
          else
            tmp_bool = (@transitioned_to_blocked_entitlement.java_kind_of? java.lang.Boolean) ? @transitioned_to_blocked_entitlement.boolean_value : @transitioned_to_blocked_entitlement
            @transitioned_to_blocked_entitlement = tmp_bool ? true : false
          end

          # conversion for transitioned_to_unblocked_entitlement [type = java.lang.Boolean]
          @transitioned_to_unblocked_entitlement = j_obj.transitioned_to_unblocked_entitlement
          if @transitioned_to_unblocked_entitlement.nil?
            @transitioned_to_unblocked_entitlement = false
          else
            tmp_bool = (@transitioned_to_unblocked_entitlement.java_kind_of? java.lang.Boolean) ? @transitioned_to_unblocked_entitlement.boolean_value : @transitioned_to_unblocked_entitlement
            @transitioned_to_unblocked_entitlement = tmp_bool ? true : false
          end
          self
        end

      end
    end
  end
end
